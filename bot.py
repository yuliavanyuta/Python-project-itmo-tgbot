import telebot
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib
import io
from monitor import monitor_schedule
from crypto_data import update_crypto_data
from create_buttons import create_crypto_buttons
from create_buttons import create_mode_buttons

matplotlib.use('agg')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = ''
bot = telebot.TeleBot(API_TOKEN)

# –§–ª–∞–≥ —Å–∫—Ä–∏–Ω–µ—Ä–∞
screener = False

# –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
crypto_list = [
    {'name': 'Bitcoin', 'ticker': 'BTCUSDT'},
    {'name': 'Ethereum', 'ticker': 'ETHUSDT'},
    {'name': 'Binance Coin', 'ticker': 'BNBUSDT'},
    {'name': 'Cardano', 'ticker': 'ADAUSDT'},
    {'name': 'Dogecoin', 'ticker': 'DOGEUSDT'},
    {'name': 'Polkadot', 'ticker': 'DOTUSDT'},
    {'name': 'Chainlink', 'ticker': 'LINKUSDT'},
    {'name': 'Litecoin', 'ticker': 'LTCUSDT'},
    {'name': 'Ripple', 'ticker': 'XRPUSDT'},
]

# –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
crypto_data = {}


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_hello(message):
    response = "Hello, I am the bot which can output cryptocurrency rates and track market changes." \
               "\nAll information is taken from Binance website."
    bot.send_message(message.chat.id, response, reply_markup=create_mode_buttons())


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–æ–≤–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global screener

    # –†–µ–∂–∏–º –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    if message.text == "CurrencyTracker":
        screener = False
        bot.send_message(message.chat.id, "Mode: CurrencyTracker", reply_markup=create_crypto_buttons(crypto_list))
    # –†–µ–∂–∏–º –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
    elif message.text == "Screener":
        screener = True
        monitor_schedule(message, crypto_list, crypto_data, bot, screener)
        bot.send_message(message.chat.id, "Mode: Screener")
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞
    elif message.text == "Choose Mode":
        screener = False
        bot.send_message(message.chat.id, "Let's switch mode!", reply_markup=create_mode_buttons())
    # –í—ã–≤–æ–¥–∏–º –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã
    else:
        for crypto in crypto_list:
            if message.text == crypto['name']:
                update_crypto_data(crypto['ticker'], crypto_data)
                current_crypto_data = crypto_data[crypto['ticker']]
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –¥–Ω–µ–π
                last_6_days_data = current_crypto_data[
                    current_crypto_data['open_time'] > datetime.now() - timedelta(days=7)]
                # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
                plt.plot(last_6_days_data['open_time'], last_6_days_data['open'])
                plt.title(f'{crypto["name"]} rate for the last 6 days')
                plt.xlabel(r'Date')
                plt.ylabel(r'Rate, USD')
                plt.grid(True)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                buffer = io.BytesIO()
                plt.savefig(buffer, format='png')
                buffer.seek(0)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
                bot.send_photo(message.chat.id, photo=buffer.getvalue())
                dollar = 'üíµ'
                bot.send_message(message.chat.id,
                                 f'{crypto["name"]} - {current_crypto_data.iloc[-1]["close"]:.2f} USD ' + dollar * 3)
                # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–≤–æ–¥–∞
                plt.clf()
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                break


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    for crypto in crypto_list:
        update_crypto_data(crypto['ticker'], crypto_data)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.polling()
